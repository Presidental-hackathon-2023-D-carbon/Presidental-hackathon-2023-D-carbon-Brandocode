{"ast":null,"code":"import { AUTH_GET_PERMISSIONS, AUTH_LOGIN, AUTH_LOGOUT, AUTH_ERROR, AUTH_CHECK } from 'react-admin';\nexport default ((type, params) => {\n  // called when the user attempts to log in\n  if (type === AUTH_LOGIN) {\n    const username = params.username,\n          password = params.password;\n    const request = new Request('http://52.90.64.113:8000/verifyuser', {\n      method: 'POST',\n      body: JSON.stringify({\n        username,\n        password\n      }),\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      })\n    }); // if (username == 'admin') {\n    //   return localStorage.setItem('token', 'admin')\n    // }\n    // else {\n    //   return localStorage.setItem('token', 'user')\n    // }\n\n    return fetch(request).then(response => {\n      if (response.status < 200 || response.status >= 300) {\n        throw new Error(response.statusText);\n      }\n\n      return response.json();\n    }).then(res => {\n      localStorage.setItem('token', res);\n    });\n  } // called when the user clicks on the logout button\n\n\n  if (type === AUTH_LOGOUT) {\n    localStorage.removeItem('token');\n    console.log(localStorage.getItem('token'));\n    return Promise.resolve();\n  } // called when the API returns an error\n\n\n  if (type === AUTH_ERROR) {\n    const status = params.status;\n\n    if (status === 401 || status === 403) {\n      localStorage.removeItem('token');\n      return Promise.reject();\n    }\n\n    return Promise.resolve();\n  } // called when the user navigates to a new location\n\n\n  if (type === AUTH_CHECK) {\n    // var identity = localStorage.getItem('token')\n    // return (identity === \"user\")\n    //    ? Promise.resolve()\n    //    : ()Promise.reject();\n    // console.log(identity)\n    return localStorage.getItem('token') ? Promise.resolve() : Promise.reject();\n  }\n\n  if (type === AUTH_GET_PERMISSIONS) {\n    const role = localStorage.getItem('token');\n    return role ? Promise.resolve(role) : Promise.reject();\n  } //}\n\n\n  return Promise.reject('Unknown method');\n});","map":{"version":3,"sources":["/Users/seansie/Desktop/2023 Agri Blockchain 總統盃/Backend/agri_code/agri-react/src/loginProvider.js"],"names":["AUTH_GET_PERMISSIONS","AUTH_LOGIN","AUTH_LOGOUT","AUTH_ERROR","AUTH_CHECK","type","params","username","password","request","Request","method","body","JSON","stringify","headers","Headers","fetch","then","response","status","Error","statusText","json","res","localStorage","setItem","removeItem","console","log","getItem","Promise","resolve","reject","role"],"mappings":"AAAA,SAASA,oBAAT,EAA+BC,UAA/B,EAA2CC,WAA3C,EAAwDC,UAAxD,EAAoEC,UAApE,QAAsF,aAAtF;AAEA,gBAAe,CAACC,IAAD,EAAOC,MAAP,KAAkB;AAC7B;AACA,MAAID,IAAI,KAAKJ,UAAb,EAAyB;AAAA,UACbM,QADa,GACUD,MADV,CACbC,QADa;AAAA,UACHC,QADG,GACUF,MADV,CACHE,QADG;AAErB,UAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,qCAAZ,EAAmD;AAC/DC,MAAAA,MAAM,EAAE,MADuD;AAE/DC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,OAAf,CAFyD;AAG/DO,MAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AAAE,wBAAgB;AAAlB,OAAZ;AAHsD,KAAnD,CAAhB,CAFqB,CAOrB;AACA;AACA;AACA;AACA;AACA;;AACA,WAAOC,KAAK,CAACR,OAAD,CAAL,CACFS,IADE,CACGC,QAAQ,IAAI;AACd,UAAIA,QAAQ,CAACC,MAAT,GAAkB,GAAlB,IAAyBD,QAAQ,CAACC,MAAT,IAAmB,GAAhD,EAAqD;AACjD,cAAM,IAAIC,KAAJ,CAAUF,QAAQ,CAACG,UAAnB,CAAN;AACH;;AACD,aAAOH,QAAQ,CAACI,IAAT,EAAP;AACH,KANE,EAOFL,IAPE,CAOKM,GAAF,IAAW;AACbC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,GAA9B;AACH,KATE,CAAP;AAUH,GAzB4B,CA0B7B;;;AACA,MAAInB,IAAI,KAAKH,WAAb,EAA0B;AACtBuB,IAAAA,YAAY,CAACE,UAAb,CAAwB,OAAxB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAY,CAACK,OAAb,CAAqB,OAArB,CAAZ;AACA,WAAOC,OAAO,CAACC,OAAR,EAAP;AACH,GA/B4B,CAgC7B;;;AACA,MAAI3B,IAAI,KAAKF,UAAb,EAAyB;AAAA,UACbiB,MADa,GACFd,MADE,CACbc,MADa;;AAErB,QAAIA,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAAjC,EAAsC;AAClCK,MAAAA,YAAY,CAACE,UAAb,CAAwB,OAAxB;AACA,aAAOI,OAAO,CAACE,MAAR,EAAP;AACH;;AACD,WAAOF,OAAO,CAACC,OAAR,EAAP;AACH,GAxC4B,CAyC7B;;;AACA,MAAI3B,IAAI,KAAKD,UAAb,EAAyB;AACrB;AACJ;AACI;AACA;AACC;AACL,WAAOqB,YAAY,CAACK,OAAb,CAAqB,OAArB,IAAgCC,OAAO,CAACC,OAAR,EAAhC,GAAoDD,OAAO,CAACE,MAAR,EAA3D;AACC;;AAEH,MAAI5B,IAAI,KAAKL,oBAAb,EAAmC;AAC7B,UAAMkC,IAAI,GAAGT,YAAY,CAACK,OAAb,CAAqB,OAArB,CAAb;AACA,WAAOI,IAAI,GAAGH,OAAO,CAACC,OAAR,CAAgBE,IAAhB,CAAH,GAA2BH,OAAO,CAACE,MAAR,EAAtC;AACH,GAtD4B,CAuD7B;;;AACA,SAAOF,OAAO,CAACE,MAAR,CAAe,gBAAf,CAAP;AACH,CAzDD","sourcesContent":["import { AUTH_GET_PERMISSIONS, AUTH_LOGIN, AUTH_LOGOUT, AUTH_ERROR, AUTH_CHECK } from 'react-admin';\n\nexport default (type, params) => {\n    // called when the user attempts to log in\n    if (type === AUTH_LOGIN) {\n        const { username, password } = params;\n        const request = new Request('http://52.90.64.113:8000/verifyuser', {\n            method: 'POST',\n            body: JSON.stringify({ username, password }),\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n        })\n        // if (username == 'admin') {\n        //   return localStorage.setItem('token', 'admin')\n        // }\n        // else {\n        //   return localStorage.setItem('token', 'user')\n        // }\n        return fetch(request)\n            .then(response => {\n                if (response.status < 200 || response.status >= 300) {\n                    throw new Error(response.statusText);\n                }\n                return response.json();\n            })\n            .then(( res ) => {\n                localStorage.setItem('token', res);\n            });\n    }\n    // called when the user clicks on the logout button\n    if (type === AUTH_LOGOUT) {\n        localStorage.removeItem('token');\n        console.log(localStorage.getItem('token'))\n        return Promise.resolve();\n    }\n    // called when the API returns an error\n    if (type === AUTH_ERROR) {\n        const { status } = params;\n        if (status === 401 || status === 403) {\n            localStorage.removeItem('token');\n            return Promise.reject();\n        }\n        return Promise.resolve();\n    }\n    // called when the user navigates to a new location\n    if (type === AUTH_CHECK) {\n        // var identity = localStorage.getItem('token')\n\t\t\t\t// return (identity === \"user\")\n        //    ? Promise.resolve()\n        //    : ()Promise.reject();\n         // console.log(identity)\n\t\t\t\treturn localStorage.getItem('token') ? Promise.resolve() : Promise.reject();\n    }\n\n\t\tif (type === AUTH_GET_PERMISSIONS) {\n        const role = localStorage.getItem('token');\n        return role ? Promise.resolve(role) : Promise.reject();\n    }\n    //}\n    return Promise.reject('Unknown method');\n};\n"]},"metadata":{},"sourceType":"module"}