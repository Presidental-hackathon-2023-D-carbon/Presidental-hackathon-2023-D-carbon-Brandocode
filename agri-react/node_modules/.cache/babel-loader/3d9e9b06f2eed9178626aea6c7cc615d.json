{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar callBound = require('call-bind/callBound');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar Call = require('es-abstract/2022/Call');\n\nvar Get = require('es-abstract/2022/Get');\n\nvar HasProperty = require('es-abstract/2022/HasProperty');\n\nvar IsCallable = require('es-abstract/2022/IsCallable');\n\nvar LengthOfArrayLike = require('es-abstract/2022/LengthOfArrayLike');\n\nvar ToObject = require('es-abstract/2022/ToObject');\n\nvar ToString = require('es-abstract/2022/ToString');\n\nvar isString = require('is-string');\n\nvar $split = callBound('String.prototype.split'); // Check failure of by-index access of string characters (IE < 9) and failure of `0 in boxedString` (Rhino)\n\nvar boxedString = Object('a');\nvar splitString = boxedString[0] !== 'a' || !(0 in boxedString);\n\nmodule.exports = function forEach(callbackfn) {\n  var thisO = ToObject(this);\n  var O = splitString && isString(this) ? $split(this, '') : thisO;\n  var len = LengthOfArrayLike(O);\n\n  if (!IsCallable(callbackfn)) {\n    throw new $TypeError('Array.prototype.forEach callback must be a function');\n  }\n\n  var thisArg;\n\n  if (arguments.length > 1) {\n    thisArg = arguments[1];\n  }\n\n  var k = 0;\n\n  while (k < len) {\n    var Pk = ToString(k);\n    var kPresent = HasProperty(O, Pk);\n\n    if (kPresent) {\n      var kValue = Get(O, Pk);\n      Call(callbackfn, thisArg, [kValue, k, O]);\n    }\n\n    k += 1;\n  }\n\n  return void undefined;\n};","map":null,"metadata":{},"sourceType":"script"}