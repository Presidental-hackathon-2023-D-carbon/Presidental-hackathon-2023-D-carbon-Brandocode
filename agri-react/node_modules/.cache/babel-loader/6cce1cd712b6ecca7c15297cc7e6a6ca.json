{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $Number = GetIntrinsic('%Number%');\nvar $RegExp = GetIntrinsic('%RegExp%');\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $parseInteger = GetIntrinsic('%parseInt%');\n\nvar callBound = require('call-bind/callBound');\n\nvar regexTester = require('safe-regex-test');\n\nvar $strSlice = callBound('String.prototype.slice');\nvar isBinary = regexTester(/^0b[01]+$/i);\nvar isOctal = regexTester(/^0o[0-7]+$/i);\nvar isInvalidHexLiteral = regexTester(/^[-+]0x[0-9a-f]+$/i);\nvar nonWS = ['\\u0085', '\\u200b', '\\ufffe'].join('');\nvar nonWSregex = new $RegExp('[' + nonWS + ']', 'g');\nvar hasNonWS = regexTester(nonWSregex);\n\nvar $trim = require('string.prototype.trim');\n\nvar Type = require('./Type'); // https://262.ecma-international.org/13.0/#sec-stringtonumber\n\n\nmodule.exports = function StringToNumber(argument) {\n  if (Type(argument) !== 'String') {\n    throw new $TypeError('Assertion failed: `argument` is not a String');\n  }\n\n  if (isBinary(argument)) {\n    return $Number($parseInteger($strSlice(argument, 2), 2));\n  }\n\n  if (isOctal(argument)) {\n    return $Number($parseInteger($strSlice(argument, 2), 8));\n  }\n\n  if (hasNonWS(argument) || isInvalidHexLiteral(argument)) {\n    return NaN;\n  }\n\n  var trimmed = $trim(argument);\n\n  if (trimmed !== argument) {\n    return StringToNumber(trimmed);\n  }\n\n  return $Number(argument);\n};","map":null,"metadata":{},"sourceType":"script"}