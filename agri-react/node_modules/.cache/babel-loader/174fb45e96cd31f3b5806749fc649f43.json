{"ast":null,"code":"import { Admin, Resource, fetchUtils } from 'react-admin';\nimport axios from 'axios';\nimport jsonServerProvider from 'ra-data-json-server';\n\nconst convertFileToBase64 = file => new Promise((resolve, reject) => {\n  const reader = new FileReader();\n  reader.readAsDataURL(file.rawFile);\n\n  reader.onload = () => resolve(reader.result);\n\n  reader.onerror = reject;\n});\n/**\n * For posts update only, convert uploaded image in base 64 and attach it to\n * the `picture` sent property, with `src` and `title` attributes.\n */\n\n\nconst addUploadFeature = requestHandler => (type, resource, params) => {\n  if (type === 'CREATE' && resource === 'uploadfile' || type === 'CREATE' && resource === 'post') {\n    // notice that following condition can be true only when `<ImageInput source=\"pictures\" />` component has parameter `multiple={true}`\n    // if parameter `multiple` is false, then data.pictures is not an array, but single object\n    console.log(params);\n    console.log(\"hiiiiiiiiiiiiiiiiiiiiii\"); // if (params.data.image) {\n    // only freshly dropped pictures are instance of File\n    // const formerPictures = params.data.pictures.filter(p => !(p.rawFile instanceof File));\n    // const newPictures = params.data.pictures.filter(p => p.rawFile instanceof File);\n\n    const httpClient = (url, options = {}) => {\n      // if (!options.headers) {\n      // \t\toptions.headers = new Headers({ Accept: 'application/json', credentials: 'include', 'content-type': 'application/json' });\n      // }\n      // add your own headers here\n      options.headers = new Headers();\n      options.headers.set('Content-Type', 'multipart/form-data;boundary=----WebKitFormBoundaryyrV7KO0BoCBuDbTL');\n      return fetchUtils.fetchJson(url, options);\n    };\n\n    const dataProvider = jsonServerProvider('http://52.90.64.113:8000', httpClient);\n    const data = new FormData();\n    data.append('commodity', params.data.commodity);\n    data.append('bidname', params.data.bidname);\n    data.append('bidamount', params.data.bidamount);\n    data.append('bidprice', params.data.bidprice);\n    data.append('bidspecified', params.data.bidspecified);\n    data.append('a_commodity', params.data.a_commodity);\n    data.append('askname', params.data.askname);\n    data.append('askamount', params.data.askamount);\n    data.append('askprice', params.data.askprice);\n    data.append('askspecified', params.data.askspecified); // fetch('http://localhost:8000/uploadfile', {\n    //         method: 'POST',\n    //         body: data,\n    //       }).then((response) => {\n    //               response.json().then((body) => {\n    //                         this.setState({ imageURL: `http://localhost:8000/${body.file}` });\n    //                       });\n    //             });\n    // return (type, resource, params) =>\n\n    return axios.post('http://52.90.64.113:8000/' + resource, data); // \t\taxios({\n    // \t\turl: 'https://localhost:8000'+source,\n    // \t\tmethod: 'post',\n    // \t\tdata: {\n    // \t\t\tfile,\n    // \t\t\tname: meta.name,      \n    // \t\t},\n    // \t})\n    // return dataProvider(type, resource, {\n    //         ...params,\n    //         data: {\n    // \t\t\t\t\t\t...data,\n    //             ...params.data,\n    //         },\n    //     });\n    // }\n  } // for other request types and resources, fall back to the default request handler\n\n\n  return requestHandler(type, resource, params);\n};\n\nexport default addUploadFeature;","map":{"version":3,"sources":["/Users/seansie/Desktop/2023 Agri Blockchain 總統盃/Backend/agri_code/agri-react/src/addUploadFeature.js"],"names":["Admin","Resource","fetchUtils","axios","jsonServerProvider","convertFileToBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","rawFile","onload","result","onerror","addUploadFeature","requestHandler","type","resource","params","console","log","httpClient","url","options","headers","Headers","set","fetchJson","dataProvider","data","FormData","append","commodity","bidname","bidamount","bidprice","bidspecified","a_commodity","askname","askamount","askprice","askspecified","post"],"mappings":"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","sourcesContent":["import { Admin, Resource, fetchUtils } from 'react-admin';\nimport axios from 'axios'\nimport jsonServerProvider from 'ra-data-json-server';\nconst convertFileToBase64 = file => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file.rawFile);\n\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = reject;\n});\n\n/**\n * For posts update only, convert uploaded image in base 64 and attach it to\n * the `picture` sent property, with `src` and `title` attributes.\n */\nconst addUploadFeature = requestHandler => (type, resource, params) => {\n    if ((type === 'CREATE' && resource === 'uploadfile') || (type === 'CREATE' && resource === 'post')) {\n        // notice that following condition can be true only when `<ImageInput source=\"pictures\" />` component has parameter `multiple={true}`\n        // if parameter `multiple` is false, then data.pictures is not an array, but single object\n\t\t\t\tconsole.log(params)\n        console.log(\"hiiiiiiiiiiiiiiiiiiiiii\")\n        // if (params.data.image) {\n            // only freshly dropped pictures are instance of File\n            // const formerPictures = params.data.pictures.filter(p => !(p.rawFile instanceof File));\n            // const newPictures = params.data.pictures.filter(p => p.rawFile instanceof File);\n            const httpClient = (url, options = {}) => {\n\t\t\t\t\t\t// if (!options.headers) {\n\t\t\t\t\t\t// \t\toptions.headers = new Headers({ Accept: 'application/json', credentials: 'include', 'content-type': 'application/json' });\n\t\t\t\t\t\t// }\n\t\t\t\t\t\t\t\t// add your own headers here\n\t\t\t\t\t\t\t\toptions.headers = new Headers()\n\t\t\t\t\t\t\t\toptions.headers.set('Content-Type', 'multipart/form-data;boundary=----WebKitFormBoundaryyrV7KO0BoCBuDbTL');\n\t\t\t\t\t\t\t\treturn fetchUtils.fetchJson(url, options);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst dataProvider = jsonServerProvider('http://52.90.64.113:8000', httpClient);\n\n\t\t\t\t\t\tconst data = new FormData();\n            data.append('commodity', params.data.commodity);\n            data.append('bidname', params.data.bidname);\n\t    data.append('bidamount', params.data.bidamount);\n            data.append('bidprice', params.data.bidprice);\n            data.append('bidspecified', params.data.bidspecified);\n            data.append('a_commodity', params.data.a_commodity);\n            data.append('askname', params.data.askname);\n            data.append('askamount', params.data.askamount);\n            data.append('askprice', params.data.askprice);\n            data.append('askspecified', params.data.askspecified);\n\n            // fetch('http://localhost:8000/uploadfile', {\n            //         method: 'POST',\n            //         body: data,\n            //       }).then((response) => {\n            //               response.json().then((body) => {\n            //                         this.setState({ imageURL: `http://localhost:8000/${body.file}` });\n            //                       });\n            //             });\n\t\t\t\t\t\t// return (type, resource, params) =>\n\t\t\t\t\t\treturn axios.post('http://52.90.64.113:8000/'+resource, data)\n\t\t\t\t\t// \t\taxios({\n\t\t\t\t\t// \t\turl: 'https://localhost:8000'+source,\n\t\t\t\t\t// \t\tmethod: 'post',\n\t\t\t\t\t// \t\tdata: {\n\t\t\t\t\t// \t\t\tfile,\n\t\t\t\t\t// \t\t\tname: meta.name,      \n\t\t\t\t\t// \t\t},\n\t\t\t\t\t// \t})\n            // return dataProvider(type, resource, {\n            //         ...params,\n            //         data: {\n\t\t\t\t\t\t// \t\t\t\t\t\t...data,\n            //             ...params.data,\n            //         },\n            //     });\n        // }\n    }\n    // for other request types and resources, fall back to the default request handler\n    return requestHandler(type, resource, params);\n};\n\nexport default addUploadFeature;\n"]},"metadata":{},"sourceType":"module"}