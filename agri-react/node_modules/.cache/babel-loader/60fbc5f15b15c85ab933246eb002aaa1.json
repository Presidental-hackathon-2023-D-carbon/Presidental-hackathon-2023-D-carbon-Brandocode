{"ast":null,"code":"var _jsxFileName = \"/Users/seansie/Desktop/2023 Agri Blockchain \\u7E3D\\u7D71\\u76C3/Backend/agri_code/agri-react/src/blockchain/bcpost.js\";\nimport React from 'react';\nimport { Create, List, Datagrid, TextField, ImageField, ReferenceField, EditButton, FunctionField } from 'react-admin';\nimport { ImageInput, Edit, SimpleForm, DisabledInput, ReferenceInput, SelectInput, TextInput, LongTextInput } from 'react-admin';\nimport { UrlField, Show, SimpleShowLayout, DateField, RichTextField, ArrayField, ArrayInput, SimpleFormIterator } from 'react-admin';\nimport Button from '@material-ui/core/Button';\nimport CardActions from '@material-ui/core/CardActions';\nimport PropTypes from 'prop-types';\nexport const bcList = props => React.createElement(List, Object.assign({\n  title: React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, \"\\u5340\\u584A\\u93C8\\u8CC7\\u6599\")\n}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n}), React.createElement(Datagrid, {\n  rowClick: \"show\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}, React.createElement(TextField, {\n  source: \"tag\",\n  label: \"\\u6848\\u4EF6\\u4EE3\\u865F\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}), React.createElement(TextField, {\n  source: \"name\",\n  label: \"\\u8CB8\\u6B3E\\u4EBA\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14\n  },\n  __self: this\n}), React.createElement(TextField, {\n  source: \"factory\",\n  label: \"\\u5EE0\\u5740\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n})));\nexport const bcCreate = props => React.createElement(Create, Object.assign({}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21\n  },\n  __self: this\n}), React.createElement(SimpleForm, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22\n  },\n  __self: this\n}, React.createElement(TextInput, {\n  source: \"factory\",\n  label: \"\\u5EE0\\u5740\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23\n  },\n  __self: this\n}), React.createElement(TextInput, {\n  source: \"chain\",\n  label: \"\\u5340\\u584A\\u93C8\\u540D\\u7A31\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24\n  },\n  __self: this\n}), React.createElement(ImageInput, {\n  source: \"image\",\n  label: \"Related pictures\",\n  accept: \"image/*\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25\n  },\n  __self: this\n}, React.createElement(ImageField, {\n  source: \"image\",\n  title: \"title\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 26\n  },\n  __self: this\n}))));\n\nconst MyUrlField = ({\n  record = {},\n  source\n}) => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 33\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34\n  },\n  __self: this\n}, \" Transaction Hash \"), React.createElement(\"a\", {\n  className: \"Hey\",\n  href: \"https://ropsten.etherscan.io/tx/\" + record.hash,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 35\n  },\n  __self: this\n}, record[source]));\n\nfunction populateList(imghashs, hashs) {\n  return imghashs.map((imghash, index) => React.createElement(\"div\", {\n    key: imghash.toString(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    href: \"https://ropsten.etherscan.io/tx/\" + hashs[index],\n    key: imghash.toString(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, imghash)));\n}\n\nconst SimpleArray = ({\n  source,\n  record = {}\n}) => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 50\n  },\n  __self: this\n}, populateList(record[source], record[\"hash\"]));\n\nSimpleArray.defaultProps = {\n  addLabel: false,\n  label: 'List'\n};\nSimpleArray.propTypes = {\n  label: PropTypes.string,\n  record: PropTypes.object,\n  source: PropTypes.string\n};\nexport default SimpleArray;\nexport class bcShow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      data: null,\n      hash: false\n    };\n\n    this.PostShowActions = ({\n      basePath,\n      data,\n      resource\n    }) => React.createElement(CardActions, {\n      style: this.cardActionStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      onClick: async () => {\n        if (data[\"hash\"] == \"\") {\n          window.alert(\"No Hash Yet!!\");\n          return;\n        } else {\n          var len = data[\"hash\"].length;\n          var x = {\n            'failure': 0\n          };\n          await this.a(data, len, x);\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"\\u6AA2\\u67E5\\u8CC7\\u6599\\u771F\\u507D\\u6027\"));\n\n    this.Gethash = this.Gethash.bind(this);\n  }\n\n  Gethash() {\n    this.setState({\n      hash: !this.state.hash\n    });\n  }\n\n  async componentDidMount() {\n    const url = \"http://52.90.64.113:8000/post\";\n    const response = await fetch(url);\n    const data = await response.json();\n    this.setState({\n      data: data,\n      loading: false\n    });\n    this.Gethash = this.Gethash.bind(this);\n  }\n\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  b(h, im, c) {\n    fetch(\"https://ropsten.etherscan.io/tx/\" + h).then(response => {\n      if (response.status == 200) {\n        return response.text();\n      } else if (response.status == 500) {\n        window.alert(\"Something Wrong!!\");\n        return;\n      } else {\n        window.alert(\"Server Error! Call Engineers!\");\n        return;\n      }\n    }).then(response => {\n      var domparser = new DOMParser();\n      var doc = domparser.parseFromString(response, \"text/html\");\n      var hash = doc.getElementById(\"inputdata\").innerHTML.split(\"\\n\")[4].split(\" \")[2];\n\n      if (hash == im) {\n        window.alert(\"Success: \" + im);\n        return;\n      } else {\n        window.alert(\"Fail: \" + im);\n        c.failure = 1;\n        return;\n      }\n    });\n  }\n\n  a(data, len, c) {\n    var f = [];\n\n    for (var i = 0; i < len; i++) {\n      var h = data[\"hash\"][i];\n      var im = data[\"imghash\"][i];\n      this.b(h, im, c);\n    }\n\n    ;\n  }\n\n  PostTitle({\n    record\n  }) {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, record ? \"\\u6848\\u4EF6ID: \".concat(record.id) : '');\n  }\n\n  render() {\n    if (this.state.loading) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"loading...\");\n    }\n\n    if (!this.state.data) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, \"didn't get a data\");\n    } // Data\n\n\n    return React.createElement(Show, Object.assign({\n      title: React.createElement(this.PostTitle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      })\n    }, this.props, {\n      actions: React.createElement(this.PostShowActions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), React.createElement(SimpleShowLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      source: \"tag\",\n      label: \"\\u6848\\u4EF6\\u4EE3\\u865F\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      source: \"name\",\n      label: \"\\u8CB8\\u6B3E\\u4EBA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      source: \"factory\",\n      label: \"\\u5EE0\\u5740\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      source: \"date\",\n      label: \"\\u4E0A\\u93C8\\u65E5\\u671F\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      source: \"chain\",\n      label: \"\\u5340\\u584A\\u93C8\\u540D\\u7A31\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      label: \"\\u7167\\u7247 Hash\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }), this.state.hash ? React.createElement(SimpleArray, {\n      source: \"imghash\",\n      label: \"\\u7167\\u7247 Hash\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), this.state.hash ? React.createElement(\"button\", {\n      onClick: this.Gethash,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \"Close\") : React.createElement(\"button\", {\n      onClick: this.Gethash,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \"Open\"), React.createElement(TextField, {\n      source: \"lat\",\n      label: \"\\u7DEF\\u5EA6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      source: \"long\",\n      label: \"\\u7D93\\u5EA6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      source: \"dddh\",\n      label: \"\\u5730\\u6BB5\\u5730\\u865F\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }), React.createElement(UrlField, {\n      source: \"image\",\n      label: \"\\u7167\\u7247\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/seansie/Desktop/2023 Agri Blockchain 總統盃/Backend/agri_code/agri-react/src/blockchain/bcpost.js"],"names":["React","Create","List","Datagrid","TextField","ImageField","ReferenceField","EditButton","FunctionField","ImageInput","Edit","SimpleForm","DisabledInput","ReferenceInput","SelectInput","TextInput","LongTextInput","UrlField","Show","SimpleShowLayout","DateField","RichTextField","ArrayField","ArrayInput","SimpleFormIterator","Button","CardActions","PropTypes","bcList","props","bcCreate","MyUrlField","record","source","hash","populateList","imghashs","hashs","map","imghash","index","toString","SimpleArray","defaultProps","addLabel","label","propTypes","string","object","bcShow","Component","constructor","state","loading","data","PostShowActions","basePath","resource","cardActionStyle","window","alert","len","length","x","a","Gethash","bind","setState","componentDidMount","url","response","fetch","json","sleep","ms","Promise","resolve","setTimeout","b","h","im","c","then","status","text","domparser","DOMParser","doc","parseFromString","getElementById","innerHTML","split","failure","f","i","PostTitle","id","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Create, List, Datagrid, TextField, ImageField, ReferenceField, EditButton, FunctionField } from 'react-admin';\nimport { ImageInput, Edit, SimpleForm, DisabledInput, ReferenceInput, SelectInput, TextInput, LongTextInput} from 'react-admin';\nimport { UrlField, Show, SimpleShowLayout, DateField, RichTextField ,ArrayField,ArrayInput,SimpleFormIterator} from 'react-admin';\nimport Button from '@material-ui/core/Button';\nimport CardActions from '@material-ui/core/CardActions';\nimport PropTypes from 'prop-types';\n\n\nexport const bcList = props => (\n    <List title={<span>區塊鏈資料</span>} {...props}>\n        <Datagrid rowClick=\"show\">\n            <TextField source=\"tag\" label=\"案件代號\"/>\n            <TextField source=\"name\" label=\"貸款人\"/>\n            <TextField source=\"factory\" label=\"廠址\"/>\n        </Datagrid>\n    </List>\n);\n\nexport const bcCreate = (props) => (\n    <Create {...props}>\n        <SimpleForm>\n            <TextInput source=\"factory\" label=\"廠址\"/>\n            <TextInput source=\"chain\" label=\"區塊鏈名稱\"/>\n            <ImageInput source=\"image\" label=\"Related pictures\" accept=\"image/*\">\n              <ImageField source=\"image\" title=\"title\" />\n            </ImageInput>\n        </SimpleForm>\n    </Create>\n);\n\nconst MyUrlField = ({ record = {}, source }) =>\n  <div>\n    <div> Transaction Hash </div>\n      <a className=\"Hey\" href={\"https://ropsten.etherscan.io/tx/\"+record.hash}>\n            {record[source]}\n    </a>\n</div>\n\nfunction populateList(imghashs,hashs) {\n    return imghashs.map((imghash,index) =>\n    <div key={imghash.toString()}><a href = {\"https://ropsten.etherscan.io/tx/\"+hashs[index]}  key={imghash.toString()}>\n        {imghash}\n    </a></div>\n);\n   \n}\n\nconst SimpleArray = ({source, record = {}}) =>\n  <div>\n      {\n          populateList(record[source],record[\"hash\"])\n      }\n  </div>;\n\n\nSimpleArray.defaultProps = {\n  addLabel: false,\n  label: 'List'\n};\n\n\nSimpleArray.propTypes = {\n  label: PropTypes.string,\n  record: PropTypes.object,\n  source: PropTypes.string\n};\n\nexport default SimpleArray;\n\nexport class bcShow extends React.Component {\n  constructor(props){\n    super(props);\n    this.Gethash=this.Gethash.bind(this);\n  }\n  state = {\n    loading: true,\n    data: null,\n    hash:false\n  };\n\n  Gethash() {\n    this.setState({hash:!this.state.hash});\n  }\n\n  async componentDidMount() {\n    const url = \"http://52.90.64.113:8000/post\";\n    const response = await fetch(url);\n    const data = await response.json();\n    this.setState({ data: data, loading: false });\n    this.Gethash = this.Gethash.bind(this);\n  }\n\nsleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n\nb(h, im, c) {\n\tfetch(\"https://ropsten.etherscan.io/tx/\" + h).\n\tthen((response) => { \n\tif (response.status == 200) {\n\t\treturn response.text();}\n\telse if (response.status == 500) {\n\t\twindow.alert(\"Something Wrong!!\");\n\t\treturn;}\n\telse { window.alert(\"Server Error! Call Engineers!\");\n\t\treturn; }})\n\t.then((response) => {\n\tvar domparser = new DOMParser()\n\tvar doc = domparser.parseFromString(response, \"text/html\")\n\tvar hash = doc.getElementById(\"inputdata\").innerHTML.split(\"\\n\")[4].split(\" \")[2]\n\tif (hash == im) {\n\t\twindow.alert(\"Success: \" + im);\n\t\treturn;\n\t}\n\telse {\n\t\twindow.alert(\"Fail: \"+ im);\n\t\tc.failure = 1;\n\t\treturn;\n\t}\n\t}\n\t)\n};\n\na(data, len, c) { \n\tvar f = [];\n\tfor (var i=0; i<len; i++) {\n\t\tvar h = data[\"hash\"][i]\n\t\tvar im = data[\"imghash\"][i]\n\t\tthis.b(h, im, c);\n\t};\n};\nPostTitle({ record }) {\n      return <span>{record ? `案件ID: ${record.id}` : ''}</span>;\n};\n\nPostShowActions = ({ basePath, data, resource }) => (\n  <CardActions style={this.cardActionStyle}>\n  <Button color=\"primary\" onClick={\n  async () => {\n    if ( data[\"hash\"] == \"\") {\n      window.alert(\"No Hash Yet!!\");\n      return;\n    }\n    else {\n      var len = data[\"hash\"].length\n      var x = {'failure': 0};\n      await this.a(data, len, x)\n    }\n}\n}>檢查資料真偽性</Button>\n    </CardActions>\n  );\n\n  render() {\n    if (this.state.loading) {\n      return <div>loading...</div>;\n    }\n\n    if (!this.state.data) {\n      return <div>didn't get a data</div>;\n    }\n    // Data\n    return (\n    <Show  title={< this.PostTitle/>} {...this.props} actions={<this.PostShowActions />}>\n        <SimpleShowLayout>\n            <TextField source=\"tag\" label=\"案件代號\"/>\n            <TextField source=\"name\" label=\"貸款人\"/>\n            <TextField source=\"factory\" label=\"廠址\"/>\n            <TextField source=\"date\" label=\"上鏈日期\"/>\n            <TextField source=\"chain\" label=\"區塊鏈名稱\"/>\n            <TextField label=\"照片 Hash\"/>\n            {this.state.hash ? <SimpleArray source=\"imghash\" label=\"照片 Hash\"></SimpleArray>:<div></div>}\n            {this.state.hash ? <button onClick={this.Gethash}>Close</button> : <button onClick={this.Gethash}>Open</button>}\n            <TextField source=\"lat\" label=\"緯度\"/>\n            <TextField source=\"long\" label=\"經度\"/>\n            <TextField source=\"dddh\" label=\"地段地號\"/>\n            <UrlField source=\"image\" label=\"照片\"/>\n        </SimpleShowLayout>\n    </Show>\n  );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}